apiVersion: v1
kind: Pod
metadata:
  name: network-debug-toolkit
  namespace: default
  labels:
    app: debug-toolkit
    purpose: testing
spec:
  containers:
    - name: toolkit
      image: nicolaka/netshoot:latest
      command: ["/bin/bash"]
      args: ["-c", "while true; do sleep 30; done"]

      # Resource limits
      resources:
        requests:
          memory: "256Mi"
          cpu: "100m"
        limits:
          memory: "512Mi"
          cpu: "500m"

      # Environment variables for testing
      env:
        - name: REDIS_HOST
          value: "redis.default.svc.cluster.local"
        - name: API_HOST
          value: "api.default.svc.cluster.local"
        - name: WEB_HOST
          value: "web.default.svc.cluster.local"

      # Security context
      securityContext:
        runAsNonRoot: false
        runAsUser: 0
        capabilities:
          add:
            - NET_ADMIN
            - NET_RAW

      # Volume mounts for persistent scripts
      volumeMounts:
        - name: test-scripts
          mountPath: /scripts
          readOnly: false

    # Additional container with Apache Bench and specialized tools
    - name: benchmark-tools
      image: ubuntu:22.04
      command: ["/bin/bash"]
      args:
        [
          "-c",
          "apt-get update && apt-get install -y apache2-utils siege wrk curl wget jq htop iperf3 redis-tools postgresql-client && while true; do sleep 30; done",
        ]

      resources:
        requests:
          memory: "128Mi"
          cpu: "50m"
        limits:
          memory: "256Mi"
          cpu: "200m"

      env:
        - name: DEBIAN_FRONTEND
          value: "noninteractive"

  # Volume for shared test scripts
  volumes:
    - name: test-scripts
      configMap:
        name: test-scripts
        defaultMode: 0755

  # Pod settings
  restartPolicy: Always
  terminationGracePeriodSeconds: 30

  # Node selector (optional)
  # nodeSelector:
  #   kubernetes.io/arch: amd64

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-scripts
  namespace: default
data:
  # DNS testing script
  test-dns.sh: |
    #!/bin/bash
    echo "=== DNS Resolution Tests ==="
    echo "Testing internal services..."

    services=("redis" "api" "web" "redis.default.svc.cluster.local" "api.default.svc.cluster.local")

    for service in "${services[@]}"; do
        echo "Testing: $service"
        nslookup $service
        echo "---"
    done

  # Redis connectivity test
  test-redis.sh: |
    #!/bin/bash
    echo "=== Redis Connectivity Tests ==="

    REDIS_HOSTS=("redis" "redis.default.svc.cluster.local" "redis:6379")

    for host in "${REDIS_HOSTS[@]}"; do
        echo "Testing Redis: $host"
        
        # Test connection
        timeout 5 bash -c "</dev/tcp/${host%:*}/${host#*:}" 2>/dev/null
        if [ $? -eq 0 ]; then
            echo "‚úÖ TCP connection successful to $host"
        else
            echo "‚ùå TCP connection failed to $host"
        fi
        
        # Test Redis ping (if redis-cli available)
        if command -v redis-cli >/dev/null; then
            redis-cli -h ${host%:*} -p ${host#*:} ping 2>/dev/null
            if [ $? -eq 0 ]; then
                echo "‚úÖ Redis PING successful"
            else
                echo "‚ùå Redis PING failed"
            fi
        fi
        echo "---"
    done

  # HTTP services test
  test-http.sh: |
    #!/bin/bash
    echo "=== HTTP Services Tests ==="

    # Test API endpoints
    echo "Testing API endpoints..."

    API_ENDPOINTS=(
        "http://api:8080/healthz"
        "http://api.default.svc.cluster.local:8080/healthz"
    )

    for endpoint in "${API_ENDPOINTS[@]}"; do
        echo "Testing: $endpoint"
        curl -v --connect-timeout 5 --max-time 10 "$endpoint" 2>&1
        echo "---"
    done

    # Test Web endpoints
    echo "Testing Web endpoints..."
    WEB_ENDPOINTS=(
        "http://web:80/health"
        "http://web.default.svc.cluster.local:80/health"
    )

    for endpoint in "${WEB_ENDPOINTS[@]}"; do
        echo "Testing: $endpoint"
        curl -v --connect-timeout 5 --max-time 10 "$endpoint" 2>&1
        echo "---"
    done

  # Benchmark script
  benchmark.sh: |
    #!/bin/bash
    echo "=== Benchmark Tests ==="

    # Apache Bench test
    if command -v ab >/dev/null; then
        echo "Running Apache Bench test..."
        ab -n 100 -c 10 http://api:8080/healthz
    fi

    # Siege test (if available)
    if command -v siege >/dev/null; then
        echo "Running Siege test..."
        siege -c 10 -t 30s http://api:8080/healthz
    fi

    # wrk test (if available)
    if command -v wrk >/dev/null; then
        echo "Running wrk test..."
        wrk -t12 -c400 -d30s http://api:8080/healthz
    fi

  # Network diagnostics
  network-diag.sh: |
    #!/bin/bash
    echo "=== Network Diagnostics ==="

    echo "Network interfaces:"
    ip addr show
    echo "---"

    echo "Routing table:"
    ip route show
    echo "---"

    echo "DNS configuration:"
    cat /etc/resolv.conf
    echo "---"

    echo "Active connections:"
    netstat -tuln 2>/dev/null || ss -tuln
    echo "---"

    echo "Testing external connectivity:"
    ping -c 3 8.8.8.8
    echo "---"

  # Comprehensive test runner
  run-all-tests.sh: |
    #!/bin/bash
    echo "üöÄ Running comprehensive test suite..."
    echo "============================================"

    cd /scripts

    echo "1Ô∏è‚É£ Running network diagnostics..."
    ./network-diag.sh

    echo -e "\n2Ô∏è‚É£ Running DNS tests..."
    ./test-dns.sh

    echo -e "\n3Ô∏è‚É£ Running Redis tests..."
    ./test-redis.sh

    echo -e "\n4Ô∏è‚É£ Running HTTP tests..."
    ./test-http.sh

    echo -e "\n5Ô∏è‚É£ Running benchmarks..."
    ./benchmark.sh

    echo -e "\n‚úÖ All tests completed!"

---
apiVersion: v1
kind: Service
metadata:
  name: debug-toolkit-svc
  namespace: default
spec:
  selector:
    app: debug-toolkit
  ports:
    - port: 80
      targetPort: 80
      name: http
  type: ClusterIP
